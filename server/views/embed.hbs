<html lang="en">
   <head>
     <meta charset="utf-8">
     <title> Cyclopse </title>
     <!-- CSS --> 
     <link rel="stylesheet" href="../css/iframe.css" />
     <link rel="stylesheet" href="../css/video.css" />

     {{#if cyclopse }}
       <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons"/>
       <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
     {{/if }}
   </head>
   <body>

      {{#if iframe}} {{> iframe}} {{/if}} 
      {{#if cyclopse}} {{> video }} {{/if}}

      <script>
         
         function cyclopse_loader(){

            var tag, firstScriptTag, player, loop, quality, mute, rate, start, end, init, overlay, timer, height, width;
            var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );

            // Options & Overlay
            loop = {{video.loop}};
            quality = "{{video.quality}}";
            autoplay = {{ video.autoplay }};
            mute =  {{ video.mute }};
            rate = {{ video.rate }};
            start = {{ video.start }};
            end = {{ video.end }};
            init = true; 
            overlay = document.getElementById('cyclopse-overlay');
            height = "100%";
            width = "100%";
        
            // Load YT Player API
            tag = document.createElement("script");          
            tag.src = (("http:" === document.location.protocol) ? "http:" : "https:") + "//www.youtube.com/iframe_api"; 
            firstScriptTag = document.getElementById('cyclopse-youtube-player');    
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);          
            
            // Main
            window.onYouTubeIframeAPIReady = function(){ loadPlayer(); }

            // Player instance
            function loadPlayer(){
               embdebug = player = new YT.Player('cyclopse-youtube-player', {
                  width: width,
                  height: height,
                  videoId: "{{video.videoId}}",
                  playerVars: {
                     'iv_load_policy':  {{ video.iv_load_policy }},
                     'controls' : {{video.controls}},
                     'disablekb': {{video.disablekb}},
                     'fs' : {{video.fs}},
                     'modestbranding' : {{video.modestbranding}},
                     'showinfo' : {{video.showinfo}}
                  },
                  events: {
                     onReady: onPlayerReady, 
                     onStateChange: onPlayerStateChange, 
                     onError: onPlayerError 
                  } 
               }); 
            }; 
      
            // Timing - setStop(), killStop(), getOffset()
            // See client/scripts/services/ytplayerAPI.js 
            function setStop(looping){
  
               var ms;
               
               (iOS && looping) ? ms = timeoutLength_IOS() : ms = timeoutLength();

               timer = setTimeout(function(){
                  (!loop) ? 
                    player.pauseVideo() : 
                    player.seekTo(start); 
                  
                  killStop(true);

               }, ms);
            };

            function killStop(looping){
              clearTimeout(timer);
              (iOS && looping) ? setStop(looping) : false;
            }

            function timeoutLength(){
              var ms = Math.floor( (end - player.getCurrentTime()) * 1000 );

              if (rate == 0.5) return (ms * 2);
              if (rate == 1 ) return (ms);
              if (rate == 1.5) return Math.floor(ms * .66);

              return ms; 
            }

            // iOS is missing the pause event, so 
            // it needs its new stop set directly in the kill on 
            // loop, and the time duration needs to be set to 
            // to clip length, or else there's a weird skip.
            function timeoutLength_IOS(){
              var ms = Math.floor( (end - start) * 1000 );
              if (rate == 0.5) return (ms * 2);
              if (rate == 1 ) return (ms);
              if (rate == 1.5) return Math.floor(ms * .66);
              return ms; 
            }

            // YT Player callbacks
            function onPlayerReady(){
              player.mute();
              
              if (!iOS){
                player.seekTo(start);
                player.playVideo();
              } else {
                overlay.style.visibility = "hidden";
                autoplay = true;
              } 
            };

            function onPlayerStateChange(event){
               if (event.data === YT.PlayerState.PLAYING){
                  setStop();
                  if (init){
                    
                    init = false;
                    player.pauseVideo();
                    player.seekTo(start);
                    
                    (rate != 1) ? 
                      player.setPlaybackRate(rate) : 
                      false;
                    
                    (autoplay) ? 
                      player.playVideo() : 
                      player.pauseVideo();
                     
                    
                    setTimeout(function(){
                      overlay.style.visibility = "hidden";
                      
                      (!mute) ? 
                        player.unMute(): 
                        false;
                     
                    }, 250);
                  }
               } else {
                 killStop();
               }
            };
            function onPlayerError(){ console.error("Cyclop.se v YouTube.com: 0-1"); };
         };
         
         // Do it. 
         cyclopse_loader();

      </script>
   </body>
</html>